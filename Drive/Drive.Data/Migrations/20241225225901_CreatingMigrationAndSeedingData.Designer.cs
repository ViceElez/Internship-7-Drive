// <auto-generated />
using System;
using Drive.Data.Entities;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Drive.Data.Migrations
{
    [DbContext(typeof(DriveDbContext))]
    [Migration("20241225225901_CreatingMigrationAndSeedingData")]
    partial class CreatingMigrationAndSeedingData
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Drive.Data.Entities.Models.Files.DriveFile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("FileUserId")
                        .HasColumnType("integer");

                    b.Property<int>("FolderId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("LastChanges")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("FileUserId");

                    b.HasIndex("FolderId");

                    b.ToTable("driveFiles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            FileUserId = 1,
                            FolderId = 0,
                            LastChanges = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Resume.pdf",
                            Text = "Resume content"
                        },
                        new
                        {
                            Id = 2,
                            FileUserId = 1,
                            FolderId = 0,
                            LastChanges = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "ProjectPlan.docx",
                            Text = "Project Plan content"
                        },
                        new
                        {
                            Id = 3,
                            FileUserId = 1,
                            FolderId = 0,
                            LastChanges = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Budget.xlsx",
                            Text = "Budget content"
                        },
                        new
                        {
                            Id = 4,
                            FileUserId = 2,
                            FolderId = 0,
                            LastChanges = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Hobbies.txt",
                            Text = "Hobbies content"
                        },
                        new
                        {
                            Id = 5,
                            FileUserId = 2,
                            FolderId = 0,
                            LastChanges = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "ToDoList.docx",
                            Text = "ToDo list content"
                        },
                        new
                        {
                            Id = 6,
                            FileUserId = 3,
                            FolderId = 0,
                            LastChanges = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Notes.txt",
                            Text = "Notes content"
                        },
                        new
                        {
                            Id = 7,
                            FileUserId = 3,
                            FolderId = 0,
                            LastChanges = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Presentation.pptx",
                            Text = "Presentation content"
                        },
                        new
                        {
                            Id = 8,
                            FileUserId = 4,
                            FolderId = 0,
                            LastChanges = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Invoice.pdf",
                            Text = "Invoice content"
                        },
                        new
                        {
                            Id = 9,
                            FileUserId = 5,
                            FolderId = 0,
                            LastChanges = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "MeetingNotes.doc",
                            Text = "Meeting notes content"
                        },
                        new
                        {
                            Id = 10,
                            FileUserId = 5,
                            FolderId = 0,
                            LastChanges = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "ProductDesign.png",
                            Text = "Product design content"
                        },
                        new
                        {
                            Id = 11,
                            FileUserId = 6,
                            FolderId = 0,
                            LastChanges = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "CodeSnippet.cs",
                            Text = "Code snippet content"
                        },
                        new
                        {
                            Id = 12,
                            FileUserId = 6,
                            FolderId = 0,
                            LastChanges = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "SetupGuide.md",
                            Text = "Setup guide content"
                        });
                });

            modelBuilder.Entity("Drive.Data.Entities.Models.Folders.DriveFolder", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("FolderUserId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("ParentFolderId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("FolderUserId");

                    b.HasIndex("ParentFolderId");

                    b.ToTable("driveFolders");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FolderUserId = 1,
                            Name = "Work",
                            ParentFolderId = 0
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FolderUserId = 1,
                            Name = "Personal",
                            ParentFolderId = 0
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FolderUserId = 2,
                            Name = "Projects",
                            ParentFolderId = 0
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FolderUserId = 3,
                            Name = "Finance",
                            ParentFolderId = 0
                        },
                        new
                        {
                            Id = 5,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FolderUserId = 5,
                            Name = "Designs",
                            ParentFolderId = 0
                        },
                        new
                        {
                            Id = 6,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FolderUserId = 6,
                            Name = "Development",
                            ParentFolderId = 0
                        });
                });

            modelBuilder.Entity("Drive.Data.Entities.Models.Users.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Email = "ivana@vip.com",
                            Password = "password123"
                        },
                        new
                        {
                            Id = 2,
                            Email = "josip@yahoo.pro",
                            Password = "password456"
                        },
                        new
                        {
                            Id = 3,
                            Email = "mario@abc.com",
                            Password = "password789"
                        },
                        new
                        {
                            Id = 4,
                            Email = "luka@gmail.com",
                            Password = "password000"
                        },
                        new
                        {
                            Id = 5,
                            Email = "ana@domain.com",
                            Password = "password111"
                        },
                        new
                        {
                            Id = 6,
                            Email = "nikola@company.com",
                            Password = "password222"
                        });
                });

            modelBuilder.Entity("Drive.Data.Entities.Models.Files.DriveFile", b =>
                {
                    b.HasOne("Drive.Data.Entities.Models.Users.User", "FileUser")
                        .WithMany("Files")
                        .HasForeignKey("FileUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Drive.Data.Entities.Models.Folders.DriveFolder", "Folder")
                        .WithMany("Files")
                        .HasForeignKey("FolderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FileUser");

                    b.Navigation("Folder");
                });

            modelBuilder.Entity("Drive.Data.Entities.Models.Folders.DriveFolder", b =>
                {
                    b.HasOne("Drive.Data.Entities.Models.Users.User", "FolderUser")
                        .WithMany("Folders")
                        .HasForeignKey("FolderUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Drive.Data.Entities.Models.Folders.DriveFolder", "ParentFolder")
                        .WithMany("SubFolders")
                        .HasForeignKey("ParentFolderId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();

                    b.Navigation("FolderUser");

                    b.Navigation("ParentFolder");
                });

            modelBuilder.Entity("Drive.Data.Entities.Models.Folders.DriveFolder", b =>
                {
                    b.Navigation("Files");

                    b.Navigation("SubFolders");
                });

            modelBuilder.Entity("Drive.Data.Entities.Models.Users.User", b =>
                {
                    b.Navigation("Files");

                    b.Navigation("Folders");
                });
#pragma warning restore 612, 618
        }
    }
}
